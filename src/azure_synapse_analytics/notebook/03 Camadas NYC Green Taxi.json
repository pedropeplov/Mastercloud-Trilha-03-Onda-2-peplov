{
	"name": "03 Camadas NYC Green Taxi",
	"properties": {
		"folder": {
			"name": "Prática 02"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "novoapachepeplo",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "77a10624-906f-4340-9003-382097a10a06"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/14c72e24-7729-4d8d-8139-a66b282ef81b/resourceGroups/aula1/providers/Microsoft.Synapse/workspaces/novosynapse/bigDataPools/novoapachepeplo",
				"name": "novoapachepeplo",
				"type": "Spark",
				"endpoint": "https://novosynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/novoapachepeplo",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"source": [
					"#### Para exemplificar o conceito de camadas na Medallion Architecture usando o PySpark e o dataset NycTlcGreen do AzureML OpenDatasets, você pode realizar transformações e análises progressivas que representem a transição entre as camadas Bronze, Prata e Ouro."
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Carregamento dos dados"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from azureml.opendatasets import NycTlcGreen\n",
					"\n",
					"from datetime import datetime\n",
					"from dateutil import parser\n",
					"end_date = parser.parse('2018-06-06')\n",
					"start_date = parser.parse('2018-05-01')\n",
					"\n",
					"nyc_tlc = NycTlcGreen(start_date=start_date, end_date=end_date)\n",
					"nyc_tlc_df = nyc_tlc.to_spark_dataframe()"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"type(nyc_tlc_df)"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(nyc_tlc_df)"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"display(nyc_tlc_df)"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"nyc_tlc_df.count()"
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Camada Bronze"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Na camada Bronze, você tem os dados brutos, não tratados e em seu formato original. O seu DataFrame nyc_tlc_df inicial está nesta camada."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_bronze = nyc_tlc_df"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(f\"Dataframe inicial com {df_bronze.count()} registros.\")"
				],
				"execution_count": 6
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Salvando o dado na camada Bronze"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_bronze.write.parquet(\n",
					"    path='abfss://azuresynapse@novostoragepeplov.dfs.core.windows.net/filesystempeplov',\n",
					"    mode='overwrite'\n",
					")"
				],
				"execution_count": 7
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Camada Silver"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Na camada Prata, os dados são limpos, transformados e enriquecidos. Você pode aplicar filtros, remover valores nulos e adicionar colunas derivadas."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Lemos o novo dadodo nosso storage\n",
					"df_bronze = spark.read.load(\n",
					"    path='abfss://azuresynapse@samasterclouddev01.dfs.core.windows.net/nyc_taxi/bronze/',\n",
					"    format='parquet'\n",
					"\n",
					")"
				],
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import col\n",
					"\n",
					"# Limpeza e transformações básicas\n",
					"df_silver = df_bronze.filter(col('passengerCount') > 0) \\\n",
					"                            .dropna(subset=['tripDistance', 'fareAmount']) \\\n",
					"                            .withColumnRenamed('tripDistance', 'trip_distance') \\\n",
					"                            .withColumnRenamed('fareAmount', 'fare_amount')\n",
					"\n",
					"# Log dos dados transformados\n",
					"print(f\"Dataframe transformado com {df_silver.count()} registros.\")"
				],
				"execution_count": 25
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Salvando os dados na camada Silver"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_silver.explain(\"EXTENDED\")"
				],
				"execution_count": 39
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_silver.write.parquet(\n",
					"    path='abfss://azuresynapse@samasterclouddev01.dfs.core.windows.net/nyc_taxi/silver',\n",
					"    mode='overwrite'\n",
					")"
				],
				"execution_count": 27
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Camada Ouro"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Finalmente, na camada Ouro, os dados estão prontos para análises e visualizações de alto nível. Você pode criar agregações, métricas de negócio, ou mesmo tabelas de dimensão/fato para uso em BI."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Lemos o novo dado nosso storage\n",
					"df_silver = spark.read.load(\n",
					"    path='abfss://azuresynapse@samasterclouddev01.dfs.core.windows.net/nyc_taxi/silver/',\n",
					"    format='parquet'\n",
					")"
				],
				"execution_count": 28
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.functions import avg, sum\n",
					"\n",
					"# Agregações para análise de negócios\n",
					"df_gold = df_silver.groupBy('paymentType') \\\n",
					"                   .agg(\n",
					"                         sum('fare_amount').alias('total_fare'),\n",
					"                         avg('trip_distance').alias('average_distance')\n",
					"                    )\n",
					"\n",
					"# Log dos dados agregados prontos para análise\n",
					"print(f\"Dataframe transformado com {df_gold.count()} registros.\")"
				],
				"execution_count": 33
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(df_gold)"
				],
				"execution_count": 34
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_gold.write.parquet(\n",
					"    path='abfss://azuresynapse@samasterclouddev01.dfs.core.windows.net/nyc_taxi/gold/',\n",
					"    mode='overwrite',\n",
					"    partitionBy='paymentType'\n",
					")"
				],
				"execution_count": 36
			}
		]
	}
}